/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package proyecto1;

import java.io.IOException;
import java.util.Vector;
import java.util.Scanner; //Importar scanner

/**
 *
 * @author DIANA
 */
public class Main extends javax.swing.JFrame {

    /**
     * Creates new form Main
     */
    public Main() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Texto:");

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jLabel2.setText("Resultado:");

        jButton1.setText("Calcular");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Borrar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 34, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 378, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(18, 18, 18)
                                .addComponent(jTextField1))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jButton1)
                                        .addGap(18, 18, 18)
                                        .addComponent(jButton2)))
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addGap(37, 37, 37))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        //Toma el texto de JtextField
        String datos= jTextField1.getText().toUpperCase();
        //Instancia Lisp
        Lisp milisp;
        milisp = new Lisp();
        UsoStack<String> lectura= new UsoStack<>();
        try{ 
            //elimina los "("
            /*String partes[];
            partes = datos.split("\\(");
            //for (String i : partes) System.out.print(i);
            //int[] unarray = new int[partes.length-1];
            //recorre las partes 
            for (int i=0; i<partes.length; i++){
                lectura.push(partes[i]);
                System.out.println(partes[i]);
            }*/
            datos= datos.replace("(", " ( ");
            datos= datos.replace(")", " ) ");
            //System.out.println(datos);
            Scanner scan1;//Crear scanner
            scan1 = new Scanner(datos);
            while (scan1.hasNext()) {
                String line = scan1.next();
                lectura.push(line);
                //System.out.println(line);
            }
            int k=0;
            Vector<String> cant= new Vector<>();
            Vector<Boolean> pred = new Vector<>();
            int x=lectura.size();
            while (lectura.size()>1){
                String n=lectura.pop();
                System.out.println(n);
                switch (n){
                        case "DEFUN":
                            break;
                        case "MAX":
                            int[] unarray = new int[cant.size()];
                            for (int i=0; i<cant.size(); i++){
                                unarray[i]=Integer.parseInt(cant.get(i));
                            }
                            //System.out.println(milisp.max(unarray));
                            lectura.push(Integer.toString(milisp.max(unarray)));
                            cant= new Vector<>();
                            break;
                        case "MIN":
                            unarray = new int[cant.size()];
                            for (int i=0; i<cant.size(); i++){
                                unarray[i]=Integer.parseInt(cant.get(i));
                            }
                            //System.out.println(milisp.max(unarray));
                            lectura.push(Integer.toString(milisp.min(unarray)));
                            cant= new Vector<>();
                            break;
                        case "COND":
                            boolean[] unarray1 = new boolean[pred.size()];
                            for (int i=0; i<pred.size(); i++){
                                unarray1[i]= pred.get(i);
                            }
                            //System.out.println(milisp.max(unarray));
                            pred.add(milisp.cond(unarray1));
                            pred= new Vector<>();
                            break;
                        case "EQUAL":
                            unarray = new int[cant.size()];
                            for (int i=0; i<cant.size(); i++){
                                unarray[i]=Integer.parseInt(cant.get(i));
                            }
                            pred.add((milisp.equal(unarray)));
                            cant= new Vector<>();
                            break;
                        /*case "CAR":
                            break;
                        case "CDR":
                            break;
                        case "MINUSP":
                            break;
                        case "PLUSP":
                            break;
                        case "ZEROP":
                            break;
                        case "EXPT":
                            break;
                        case "ABS":
                            break;
                        case "SQRT":
                            break;*/
                        case "+":
                            unarray = new int[cant.size()];
                            for (int i=0; i<cant.size(); i++){
                                unarray[i]=Integer.parseInt(cant.get(i));
                            }
                            //System.out.println(milisp.max(unarray));
                            lectura.push(Integer.toString(milisp.suma(unarray, unarray.length-1)));
                            cant= new Vector<>();
                            break;
                        case "-":
                            unarray = new int[cant.size()];
                            for (int i=0; i<cant.size(); i++){
                                unarray[i]=Integer.parseInt(cant.get(i));
                            }
                            //System.out.println(milisp.max(unarray));
                            lectura.push(Integer.toString(milisp.resta(unarray, unarray.length-1)));
                            cant= new Vector<>();
                            break;
                        case "*":
                            unarray = new int[cant.size()];
                            for (int i=0; i<cant.size(); i++){
                                unarray[i]=Integer.parseInt(cant.get(i));
                            }
                            //System.out.println(milisp.max(unarray));
                            lectura.push(Integer.toString(milisp.multiplicar(unarray, unarray.length-1)));
                            cant= new Vector<>();
                            break;
                        case "/":
                            unarray = new int[cant.size()];
                            for (int i=0; i<cant.size(); i++){
                                unarray[i]=Integer.parseInt(cant.get(i));
                            }
                            //System.out.println(milisp.max(unarray));
                            lectura.push(Integer.toString(milisp.dividir(unarray ,unarray.length-1)));
                            cant= new Vector<>();
                            break;
                        case ">":
                            unarray = new int[cant.size()];
                            for (int i=0; i<cant.size(); i++){
                                unarray[i]=Integer.parseInt(cant.get(i));
                            }
                            pred.add((milisp.equal(unarray)));
                            cant= new Vector<>();
                            break;
                        case "<":
                            unarray = new int[cant.size()];
                            for (int i=0; i<cant.size(); i++){
                                unarray[i]=Integer.parseInt(cant.get(i));
                            }
                            pred.add((milisp.equal(unarray)));
                            cant= new Vector<>();
                            break;
                        case "(":
                            break;
                        case ")":
                            break;
                        default:
                            cant.add(n);
                            break;
                    }
            }
            System.out.println(lectura.pop());
            System.out.println(pred.get(pred.size()-1));
            
               /*int n=unarray.length-1;
               //for (int i : unarray) System.out.print(i);
               double resultado = 0;
               switch (partes[0]){
                       case ("+"):
                           resultado = milisp.suma(unarray, n);
                           break;
                       case ("-"):
                           resultado = milisp.resta(unarray, n);
                           break;
                       case("*"):
                           resultado = milisp.multiplicar(unarray, n);
                           break;
                       case("/"):
                           resultado = milisp.dividir(unarray, n);
                           break;
                       case("MAX"):
                           resultado = milisp.max(unarray);
                           break;
                       case ("MIN"):
                           resultado = milisp.min(unarray);
                           break;
                       case ("CAR"):
                           resultado = milisp.car(unarray);
                           break;
                       case ("CDR"): 
                           int[] resultado1;
                           resultado1 = milisp.cdr(unarray);
                           jTextArea1.setEditable(true);
                           for (int k=0; k<resultado1.length; k++){
                               jTextArea1.append(resultado1[k] +","+ "\t");
                           }
                           break;
                       
                   }
               //muestra el resultado de la linea de texto 
               jTextArea1.setEditable(true);
               jTextArea1.append(resultado + "\n");*/
        }
        //captura erroes de division entre cero, no encuentre el archivo o que no sea un numero
        catch(ArithmeticException | NumberFormatException e){
            
        }
       /* try{
            //System.in
            /*Vector<String> vector;
            vector = ManipuladordeStrings.Separar(jTextField1.getText());*/
	    /*Analizador l = new Analizador(jTextField1.getText().toUpperCase());
	    Descifrador p = new Descifrador(l.Obtenersimbolos());
            p.evaluacion();
	} catch (IOException e){
            //System.out.println("Fin...");
            jTextArea1.append(e + "\n");
            jTextArea1.append("Fin..." + "\n");
            //System.out.println(e);
    	} catch (Exception e){	
            jTextArea1.append(e + "\n");
            jTextArea1.append("¡Error!" + "\n");
            //System.out.println(e);
            //System.out.println("¡Error!");
            /*if ( args.length > 0 && args[0].matches("-d") ){
            System.out.println(e.getMessage());
	    e.printStackTrace();*/
	/*}
            //System.exit(3);*/
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        //borra los datos del cuadro de texto
        jTextArea1.setEditable(true);
        jTextArea1.setText("");
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    public static javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
